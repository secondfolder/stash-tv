@import "../../styles/mixins.scss";
@import "../../styles/variables.scss";


.VideoItem {
  height: 100%;
  background: #000;
  position: relative;
  border: 1px solid transparent;
  
  .loadingDeferredPreview, .loadingDeferredDebugBackground {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 0;
  }
  
  .loadingDeferredDebugBackground {
    background-color: greenyellow;
  }
  
  .debugStats {
    position: absolute;
    top: 0;
    left: 0;
    color: white;
    background-color: rgba(0,0,0,0.5);
    z-index: 5;
    font-size: 12px;
    padding: 2px 5px;
    max-width: fit-content;
  }
    
  .video-js {
    background-color: unset;
    
    .vjs-control-bar {
      height: unset;
      padding-bottom: var(--y-dynamic-diff);
      flex-wrap: wrap;
      column-gap: 1em;
      align-items: center;
      
      .vjs-control {
        width: unset;
      }
      
      padding-right: var(--safe-inset-right);
      
      // Move the first and last items in a bit to account for curved corners of mobile devices
      .vjs-current-time {
        padding-left: 35px;
      }
      > .vjs-duration {
        padding-right: 35px;
      }

      .vjs-time-control {
        font-size: $timecode-font-size;
        display: block;
        height: unset;
      }
      .vjs-progress-control {
        position: unset;
        margin: 0 15px;
        width: calc(100% - (15px * 2));
        height: 2em; /* give the container (but not the bar itself) more height to make it a larger touch target on mobile */
        translate: 0 0.7em; /* but move down visually so it's not too spaced out */
        
        .vjs-progress-holder {
          margin: 0;
          background-color: rgb(115 115 115 / 20%);

          .vjs-load-progress {
            background: transparent;

            div {
              background: rgb(115 115 115 / 40%);
            }
          }

          /* Hide the current play position handle */
          .vjs-play-progress {
            &:before {
              color: transparent;
            }
          }
  
          /* Show a seeking position handle */
          .vjs-mouse-display {
            &:before {
              /* Taken from the default videojs play position handle */
              font-size: 0.9em;
              position: absolute;
              right: -0.5em;
              top: -0.3333333333em;
              z-index: 1;
              content: "\f111";
              font-family: VideoJS;
            }
          }
        }
      }
    }
    .vjs-loading-spinner {
      --size: 120px;
      width: var(--size);
      height: var(--size);
      border-radius: var(--size);
      margin: calc(var(--size)/2 * -1) 0 0 calc(var(--size)/2 * -1);
      opacity: 0.3;
    }
  }
  
  &:not(.inViewport):not(.currentlyScrolling) {
    filter: brightness(0.7);
    transition: filter 1s;

    .vjs-control-bar {
      opacity: 0 !important;
      pointer-events: none !important;
      transition: opacity 1s;
    }
  }

  .tap-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 7rem;
    opacity: 0;
    pointer-events: none;
  }
  .tap-icon.transparent {
    opacity: 0.5 !important;
  }
  
  
  .controls {
    position: absolute;
    bottom: calc(3em + var(--y-dynamic-diff));
    padding-top: var(--safe-inset-top);
    padding-right: var(--safe-inset-right);
    right: 3px;
    -webkit-transform: translateZ(1px); // Fix for weird ios bug causing video to overlap side controls
    // https://stackoverflow.com/a/49885529
    
    display: flex;
    flex-direction: column;
    justify-content: end;
    align-items: end;
    z-index: 1;
    pointer-events: none;
    
    > * {
      pointer-events: initial;
    }

    button {
      appearance: none;
      border: 0;
      padding: 0;
      cursor: pointer;

      display: flex;
      justify-content: center;
      align-items: center;
      height: $ui-button-size;
      width: $ui-button-size;

      background-color: transparent;
      font-size: 28px;
      line-height: 1;
      
      // Rotate icon if device is landscape to reflect device
      @container viewport (min-aspect-ratio: 1/1) {
        /* width >= height */
        &.letterboxing svg {
          transform: rotate(90deg);
        }
      }
      
      svg {
        height: 1em;
        --shadow-layer-opacity: 0.1;
        /* Compensate for icons with less mass having visually lighter shadows */
        &.fa-expand {
          --shadow-layer-opacity: 0.24;
        }
        &.fa-down-left-and-up-right-to-center {
          --shadow-layer-opacity: 0.14;
        }
        &.fa-repeat {
          --shadow-layer-opacity: 0.19;
        }
        &.fa-ellipsis-vertical {
          --shadow-layer-opacity: 0.26;
        }
        filter: 
          drop-shadow(5px 5px 10px rgba(0, 0, 0, var(--shadow-layer-opacity))) 
          drop-shadow(-5px -5px 10px rgba(0, 0, 0, var(--shadow-layer-opacity))) 
          drop-shadow(5px -5px 10px rgba(0, 0, 0, var(--shadow-layer-opacity))) 
          drop-shadow(-5px 5px 10px rgba(0, 0, 0, var(--shadow-layer-opacity)));
      }

      path {
        stroke: white;
        color: white;
      }
    }
  }
  
  
  .scene-info {
    position: absolute;
    bottom: calc(5em + var(--y-dynamic-diff));
    left: 0;
    width: 100%;
    padding: 1em 5em 1em 3em;
    z-index: 1;
    -webkit-transform: translateZ(1px); // Fix for weird ios bug causing video to overlap side controls
    // https://stackoverflow.com/a/49885529

    align-self: flex-end;
    background-color: rgba(black, 0.7);

    display: grid;
    transition: opacity ease-in-out;
    
    a {
      color: inherit;
      text-decoration-color: #ffffff85;
    }

    // Title
    h5 {
      font-size: 1.1rem;
    }

    .date {
      font-size: 0.9rem;
    }

    .performers {
      font-size: 0.9rem;
    }

    .studio {
      font-size: 0.9rem;
    }
  }
  
  
  .toggleable-ui {
    position: relative;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap-reverse;
    justify-content: center;
    transition: opacity ease-in-out;
    max-height: calc(var(--y-unit-small) * 100 - 100px);
  }

  .toggleable-ui-button {
    transition: opacity ease-in-out;
  }
}

.VideoItem {
  .ScenePlayer {
    width: 100%;
    height: 100%;
    object-fit: contain;

    justify-content: center;
    align-items: center;
    display: flex;
    
    .VideoPlayer {
      width: 100%;
      height: 100%;
    }

    &.cover {
      video {
        object-fit: cover;
      }
      .vjs-poster {
        background-size: cover;
      }
    }
    
    .video-wrapper {
      height: 100%;
    }
  }
}