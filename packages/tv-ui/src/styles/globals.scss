html {
  --x-unit-small: 1svw;
  --y-unit-small: 1svh;
  --x-unit-large: 1lvw;
  --y-unit-large: 1lvh;
  --x-unit-dynamic: 1dvw;
  --y-unit-dynamic: 1dvh;
  --y-dynamic-diff: calc((100 * var(--y-unit-large)) - (100 * var(--y-unit-dynamic)));
  --safe-inset-top: env(safe-area-inset-top, 0);
  --safe-inset-right: env(safe-area-inset-right, 0);
  --safe-inset-bottom: env(safe-area-inset-bottom, 0);
  --safe-inset-left: env(safe-area-inset-left, 0);
  scroll-snap-type: y mandatory;
  scroll-behavior: auto;
  container: viewport/size;
}

html.force-landscape {
  /*
  When in force landscape mode it shouldn't be possible to scroll up and down
  the viewport, instead scrolling should occur horizontally inside the rotated
  root element. Even though we make the root element not bigger than the viewport
  to avoid scrolling mobile browsers sometimes still have a "rubber band" effect
  when attempting to scroll passed the top or bottom. This breaks the illusion
  that we're in a true landscape orientation so we disable it.
  */
  overscroll-behavior-y: none;

  --x-unit-small: 1svh;
  --y-unit-small: 1svw;
  --x-unit-large: 1lvh;
  --y-unit-large: 1lvw;
  --x-unit-dynamic: 1dvh;
  --y-unit-dynamic: 1dvw;
  --safe-inset-top: env(safe-area-inset-left, 0);
  --safe-inset-right: env(safe-area-inset-top, 0);
  --safe-inset-bottom: env(safe-area-inset-right, 0);
  --safe-inset-left: env(safe-area-inset-bottom, 0);

  scroll-snap-type: unset; /* When the root is rotated scroll snapping doesn't seem to work on the root so we set it on a child instead */
  position: absolute;
  left: 50%;
  top: calc(50% + (env(safe-area-inset-top)/2));
  transform: translate(-50%, -50%) rotate(-90deg);
  transform-origin: center center 0px;
  overflow: hidden;
}

html.force-landscape,
html.force-landscape body {
  height: 100svw;
  width: calc(100svh + env(safe-area-inset-top));
}

html.force-landscape body {
  overflow-y: scroll;
  /* Prevent SettingsTab from causing horizontal scroll */
  overflow-x: hidden; 
  scroll-snap-type: y mandatory;
  position: relative;
}

body {
  padding: 0;
  overflow-x: initial;
}

kbd {
  /* The arrow keys chars look better in the the sans-serif font */
  font-family: var(--font-family-sans-serif);
}

html:has(dialog[open]) {
  &:not(.force-landscape), 
  &.force-landscape body {
    overflow: hidden;
    scrollbar-gutter: stable;
  }
}

div.react-select__menu,
div.dropdown-menu {
  .react-select__option--is-selected {
    background-color: var(--theme-colors-primary);
  }
}
.react-select {
  --default-colour: color-mix(in srgb, var(--text-color) 80%, black);
  --hover-colour: var(--text-color);

  .react-select__menu {
    margin-top: 2px;
    z-index: 10;
  }

  .react-select__control {
    min-height: 1lh;
    
    .react-select__input-container {
      margin: 0;
    }

    .react-select__indicator {
      color: var(--default-colour);
      transition: color 150ms;
      padding: 0.3em 0.5em;
    }
    .react-select__indicator-separator {
      background-color: color-mix(in srgb, var(--text-color) 40%, black);
      margin: 0;
    }
  }

  &:hover {
    .react-select__indicator {
      color: var(--hover-colour);
    }
  }
}

/* -------------------------------------------------------------------------- */
/*                                  Utilities                                 */
/* -------------------------------------------------------------------------- */
.sr-only {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}