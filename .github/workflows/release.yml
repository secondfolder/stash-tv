name: Build and Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history to produce change log
          path: stash-tv
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        working-directory: stash-tv
        run: |
          yarn install
          yarn --cwd packages/stash-ui setup

      - name: Bump version and create release notes
        working-directory: stash-tv
        run: |
          # light-release tracks which was the last commit from the previous version by checking when the version in
          # package.json was changed. But we don't commit that and track the version with tags. So to allow
          # light-release to work correctly we temporarily modify the commit history.
          COMMIT_WITHOUT_NEW_VERSION=$(git rev-parse HEAD)
          PREVIOUS_VERSION=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 | sed 's/^v//')
          jq ".version = \"$PREVIOUS_VERSION\"" package.json > package.tmp.json
          mv package.tmp.json package.json
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit "--fixup=v$PREVIOUS_VERSION"
          COMMIT_WITH_NEW_VERSION=$(git rev-parse HEAD)
          git rebase --autosquash "v$PREVIOUS_VERSION"^

          yarn release
          
          git commit -am "tmp commit with release notes"
          COMMIT_WITH_RELEASE_NOTES=$(git rev-parse HEAD)

          NEW_VERSION=$(jq -r '.version' package.json)
          if [[ "$PREVIOUS_VERSION" != "$NEW_VERSION" ]]; then
            echo "Version bumped from $PREVIOUS_VERSION to $NEW_VERSION"
            # We remove a git history modification, restore the new version and release notes then remove the commits
            # but keep the changes so when we tag the latest commit later we don't tag the commits we just created.
            git reset --hard $COMMIT_WITH_NEW_VERSION
            git cherry-pick $COMMIT_WITH_RELEASE_NOTES
            git reset --soft HEAD~2
          else
            echo "No version bump detected"
            git reset --hard $COMMIT_WITHOUT_NEW_VERSION
          fi

      - name: Build project
        working-directory: stash-tv
        run: yarn build

      # We check types after building because GraphQL related types are generated during build
      - name: TypeScript check
        working-directory: stash-tv
        run: tsc --noEmit

      - name: Clone stash-plugins repo
        uses: actions/checkout@v5
        with:
          repository: secondfolder/stash-plugins
          path: stash-plugins
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Copy built files to stash-plugins
        run: |
          rm -rf stash-plugins/plugins/stash-tv
          mkdir -p stash-plugins/plugins/stash-tv
          cp -r stash-tv/packages/tv-plugin/dist/* stash-plugins/plugins/stash-tv/

      - name: Commit and push built project to stash-plugins
        working-directory: stash-plugins
        run: |
          VERSION=$(jq -r '.version' ../stash-tv/package.json)
          if [[ ! "$VERSION" == 0.0.0* ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add plugins/stash-tv
            git commit -m "ci: release stash-tv $VERSION"
            git push
          else
            echo "No publishable changes made since last version"
          fi

      - name: Create git tag release
        working-directory: stash-tv
        run: |
          VERSION=$(jq -r '.version' package.json)
          if [[ ! "$VERSION" == 0.0.0* ]]; then
            git tag "v$VERSION"
            git push origin "v$VERSION"
          else
            echo "No publishable changes made since last version"
          fi

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        working-directory: stash-tv
        run: |
          VERSION=$(jq -r '.version' package.json)
          RELEASE_NOTES_FILE=".release-notes/$VERSION/release.md"
          if [[ -f "$RELEASE_NOTES_FILE" && ! "$VERSION" == 0.0.0* ]]; then
              gh release create "v$VERSION" --title "$VERSION" --notes-file "$RELEASE_NOTES_FILE"
          else
            echo "No release notes file found for $VERSION or version is 0.0.0*; skipping release creation."
          fi

      - name: Print publish info
        working-directory: stash-tv
        run: |
          VERSION=$(jq -r '.version' package.json)
          if [[ ! "$VERSION" == 0.0.0* ]]; then
            echo -e "### :rocket: Published new version: \n\`\`\`\n$VERSION\n\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### No publishable changes made since last version" >> $GITHUB_STEP_SUMMARY
          fi